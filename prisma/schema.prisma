// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// start Authjs
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fixedExpenses   FixedExpense[]
  monthlyExpenses MonthlyExpense[]
  reports         Report[]
  userSettings    UserSettings?
  tag             Tag[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// end Authjs

model FixedExpense {
  id        String   @id @default(cuid())
  label     String
  amount    Float
  notes     String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags Tag[]
}

model MonthlyExpense {
  id           String   @id @default(cuid())
  label        String
  amount       Float
  notes        String?
  userId       String
  installments Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags Tag[]
}

model Tag {
  id        String   @id @default(cuid())
  label     String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  fixedExpenses   FixedExpense[]
  monthlyExpenses MonthlyExpense[]
}

model UserSettings {
  id                   String  @id @default(cuid())
  userId               String  @unique
  currency             String? @default("USD")
  locale               String? @default("en-US")
  monthlyTargetExpense Float?
  profileImageURL      String?
  userName             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model ReportFixedExpense {
  id        String   @id @default(cuid())
  label     String
  amount    Float
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ReportMonthlyExpense {
  id           String   @id @default(cuid())
  label        String
  amount       Float
  notes        String?
  installments Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model Report {
  id                   String                 @id @default(cuid())
  userId               String
  month                Int
  year                 Int
  monthlyTargetExpense Float?
  fixedExpenses        ReportFixedExpense[]
  monthlyExpenses      ReportMonthlyExpense[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year])
}
